"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@sanity/webhook");exports.config={api:{bodyParser:!1},runtime:"nodejs"},exports.parseBody=async function(r,t,n=!0){return"text"in r?async function(r,t,n=!0){const i=r.headers.get(e.SIGNATURE_HEADER_NAME);if(!i)return console.error("Missing signature header"),{body:null,isValidSignature:null};const a=await r.text(),o=t?await e.isValidSignature(a,i,t.trim()):null;return!1!==o&&n&&await new Promise((e=>setTimeout(e,3e3))),{body:a.trim()?JSON.parse(a):null,isValidSignature:o}}(r,t,n):async function(r,t,n=!0){let i=r.headers[e.SIGNATURE_HEADER_NAME];if(Array.isArray(i)&&(i=i[0]),!i)return console.error("Missing signature header"),{body:null,isValidSignature:null};if(r.readableEnded)throw new Error("Request already ended and the POST body can't be read. Have you setup `export {config} from 'next-sanity/webhook' in your webhook API handler?`");const a=await async function(e){const r=[];for await(const t of e)r.push("string"==typeof t?Buffer.from(t):t);return Buffer.concat(r).toString("utf8")}(r),o=t?await e.isValidSignature(a,i,t.trim()):null;return!1!==o&&n&&await new Promise((e=>setTimeout(e,1e3))),{body:a.trim()?JSON.parse(a):null,isValidSignature:o}}(r,t,n)};//# sourceMappingURL=webhook.cjs.map
