{"version":3,"file":"createClient.cjs","sources":["../../src/client/createClient.ts"],"sourcesContent":["import {\n  createClient as createSanityClient,\n  type SanityClient,\n} from '@sanity/client'\n\nimport type { PreviewKitClientConfig } from './types'\n\nexport type * from './types'\nexport type * from '@sanity/client'\n// eslint-disable-next-line simple-import-sort/exports\nexport type { FilterDefault } from './types'\n\n/**\n * @public\n * @deprecated - Please use `createClient` from `@sanity/client` instead\n */\nexport const createClient = (config: PreviewKitClientConfig): SanityClient => {\n  const {\n    encodeSourceMap = detectEnableSourceMap(),\n    encodeSourceMapAtPath,\n    studioUrl = detectStudioUrl(),\n    logger,\n    ...options\n  } = config\n\n  let shouldEncodeSourceMap = encodeSourceMap === true\n\n  // If encodeSourceMap is set to 'auto', then we need to check if we're running on Vercel and on a preview deployment\n  if (encodeSourceMap === 'auto') {\n    shouldEncodeSourceMap = isVercelPreviewEnvironment()\n  }\n\n  if (typeof encodeSourceMap === 'string' && encodeSourceMap !== 'auto') {\n    throw new Error(\n      `Invalid value for encodeSourceMap: ${encodeSourceMap}. Did you mean 'auto'?`,\n    )\n  }\n\n  try {\n    if (shouldEncodeSourceMap && config.resultSourceMap !== false) {\n      if (!studioUrl) {\n        logger?.error?.(\n          '[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client',\n        )\n        return createSanityClient(options)\n      }\n\n      logger?.debug?.(\n        '[@sanity/preview-kit]: Creating source map enabled client',\n      )\n      return createSanityClient({\n        ...options,\n        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings\n        resultSourceMap: config.resultSourceMap\n          ? config.resultSourceMap\n          : 'withKeyArraySelector',\n        stega: {\n          enabled: true,\n          studioUrl,\n          logger,\n          filter: encodeSourceMapAtPath\n            ? (props) =>\n                encodeSourceMapAtPath({\n                  path: props.sourcePath,\n                  filterDefault: () => props.filterDefault(props),\n                })\n            : undefined,\n        },\n      })\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(\n      '[@sanity/preview-kit]: Error creating client',\n      err,\n      'falling back to non-embedded sourcemap mode',\n    )\n  }\n  return createSanityClient(options)\n}\n\nfunction isVercelPreviewEnvironment() {\n  try {\n    // @ts-expect-error -- VERCEL_ENV is not a declared import.meta.env variable\n    return import.meta.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\nfunction detectEnableSourceMap(): PreviewKitClientConfig['encodeSourceMap'] {\n  try {\n    // @ts-expect-error -- SANITY_SOURCE_MAP is not a declared import.meta.env variable\n    return import.meta.env.SANITY_SOURCE_MAP === 'true'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_SOURCE_MAP === 'true'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\n// eslint-disable-next-line consistent-return\nfunction detectStudioUrl() {\n  try {\n    // @ts-expect-error -- SANITY_STUDIO_URL is not a declared import.meta.env variable\n    return import.meta.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n}\n"],"names":["Object","defineProperty","exports","value","client","require","detectEnableSourceMap","SANITY_SOURCE_MAP","process","env","detectStudioUrl","SANITY_STUDIO_URL","createClient","config","_a","_b","encodeSourceMap","encodeSourceMapAtPath","studioUrl","logger","options","shouldEncodeSourceMap","VERCEL_ENV","isVercelPreviewEnvironment","Error","resultSourceMap","debug","call","createSanityClient","stega","enabled","filter","props","path","sourcePath","filterDefault","error","err","console"],"mappings":"aAgBaA,OAAAC,eAAAC,QAAA,aAAA,CAAAC,OAAA,IAAA,IAAAC,EAAAC,QAAA,kBAiFb,SAASC,IACH,IAEK,MAAsC,eAAtC,GAAgBC,iBAAsB,CACvC,MAER,CACI,IAEK,MAAkC,SAAlCC,QAAQC,IAAIF,iBAAsB,CACnC,MAER,CACO,OAAA,CACT,CAGA,SAASG,IACH,IAEF,YAAO,GAAgBC,iBAAA,CACjB,MAER,CACI,IAEF,OAAOH,QAAQC,IAAIE,iBAAA,CACb,MAER,CACF,CAAAT,QAAAU,aA/G6BC,IAhB7B,IAAAC,EAAAC,EAiBQ,MAAAC,gBACJA,EAAkBV,IAAsBW,sBACxCA,EAAAC,UACAA,EAAYR,IAAgBS,OAC5BA,KACGC,GACDP,EAEJ,IAAIQ,GAA4C,IAApBL,EAGxB,GAAoB,SAApBA,IACFK,EAoDJ,WACM,IAEK,MAA+B,kBAA/B,GAAgBC,UAAe,CAChC,MAER,CACI,IAEK,MAA2B,YAA3Bd,QAAQC,IAAIa,UAAe,CAC5B,MAER,CACO,OAAA,CACT,CAlE4BC,IAGK,iBAApBP,GAAoD,SAApBA,EACzC,MAAM,IAAIQ,MACR,sCAAsCR,2BAItC,IACE,GAAAK,IAAoD,IAA3BR,EAAOY,gBAC7B,OAAAP,GAOL,OAAAH,mBAAQW,QAARX,EAAAY,KAAAR,EACE,6DAEKS,eAAmB,IACrBR,EAEHK,gBAAiBZ,EAAOY,gBACpBZ,EAAOY,gBACP,uBACJI,MAAO,CACLC,SAAS,EACTZ,YACAC,SACAY,OAAQd,EACHe,GACCf,EAAsB,CACpBgB,KAAMD,EAAME,WACZC,cAAe,IAAMH,EAAMG,cAAcH,UAE7C,OAzBN,OAAAlB,EAAA,MAAAK,OAAA,EAAAA,EAAQiB,QAARtB,EAAAa,KAAAR,EACE,qIAEKS,eAAmBR,UA0BvBiB,GAECC,QAAAF,MACN,+CACAC,EACA,8CAEJ,CACOT,OAAAA,EAAAA,aAAmBR,EAAO"}