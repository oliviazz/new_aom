{"version":3,"file":"LiveQueryClientComponent.cjs","sources":["../../src/live-query/LiveQueryClientComponent.tsx"],"sourcesContent":["import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport type { PropsWithChildren } from 'react'\nimport { Children, cloneElement, isValidElement, memo } from 'react'\n\nimport { useLiveQuery } from './useLiveQuery'\n\n/** @public */\nexport type LiveQueryClientComponentProps<QueryResult, QueryParams> =\n  PropsWithChildren<{\n    /**\n     * If a parent <LiveQueryProvider> is missing, then an error is thrown.\n     * If you want to disable this behavior, set this prop to false.\n     * @defaultValue true\n     */\n    throwOnMissingProvider?: boolean\n    initialData: QueryResult\n    query: string\n    params?: QueryParams | undefined\n  }>\n\n// Browser-only preview component, overwrites the data prop with live data on-demand\nfunction LiveQueryClientComponent<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  props: LiveQueryClientComponentProps<QueryResult, QueryParams>,\n): React.ReactNode {\n  const {\n    initialData,\n    query,\n    params,\n    children,\n    throwOnMissingProvider = true,\n  } = props\n  const [data, enabled] = useLiveQuery<QueryResult, QueryParams>(\n    initialData,\n    query,\n    params,\n  )\n  // This hook is only used by `LiveQuery` when its `enabled` prop is true,\n  // so we can reliably assume that if a parent provider is missing then that's an error\n  if (throwOnMissingProvider && !enabled) {\n    // Throw and let them know a parent <LiveQueryProvider> is missing\n    throw new Error(\n      `<LiveQuery> require you to wrap them in a parent <LiveQueryProvider> when its 'enabled' prop is true, or set the 'throwOnMissingProvider' prop to 'false' to ignore this error`,\n    )\n  }\n\n  /**\n   * The original source for the rest of this component is `Slot` from `@radix-ui/react-slot`: https://github.com/radix-ui/primitives/blob/3e0642e40038386d58da9fb1d812c2fbfe9f67c1/packages/react/slot/src/Slot.tsx\n   * It's copied and modified here as the original doesn't override the props on children, which would require us to use this pattern:\n   * ```<LiveQuery initialData={data}><Posts /></LiveQuery>```\n   * However, we want to use this pattern as it preserves the same type safety as before live queries are added:\n   * ```<LiveQuery initialData={data}><Posts data={data} /></LiveQuery>```\n   *\n   * It also made sense to modify the original as our use case is smaller than radix, for example we don't have to worry about merging `style` props\n   */\n  if (isValidElement(children)) {\n    return cloneElement(children, {\n      ...children.props,\n      // all child props should override, except for `data`\n      data,\n      // eslint-disable-next-line no-warning-comments\n      // @ts-expect-error -- @todo fix the typings\n      ref: children.ref,\n    })\n  }\n\n  return Children.count(children) > 1 ? Children.only(null) : null\n}\nLiveQueryClientComponent.displayName = 'LiveQueryClientComponent'\n\nconst LiveQueryClientComponentMemo = memo(LiveQueryClientComponent)\nexport default LiveQueryClientComponentMemo\n"],"names":["LiveQueryClientComponent","props","initialData","query","params","children","throwOnMissingProvider","data","enabled","useLiveQuery","Error","isValidElement","cloneElement","ref","Children","count","only","displayName","LiveQueryClientComponentMemo","memo","module","exports"],"mappings":"iFAqBA,SAASA,EAIPC,GAEM,MAAAC,YACJA,EAAAC,MACAA,EAAAC,OACAA,EAAAC,SACAA,EAAAC,uBACAA,GAAyB,GACvBL,GACGM,EAAMC,GAAWC,EAAAA,aACtBP,EACAC,EACAC,GAIF,GAAIE,IAA2BE,EAE7B,MAAM,IAAIE,MACR,kLAaJ,OAAIC,iBAAeN,GACVO,EAAAA,aAAaP,EAAU,IACzBA,EAASJ,MAEZM,OAGAM,IAAKR,EAASQ,MAIXC,EAAAA,SAASC,MAAMV,GAAY,EAAIS,EAAAA,SAASE,KAAK,MAAQ,IAC9D,CACAhB,EAAyBiB,YAAc,2BAEjC,MAAAC,EAA+BC,OAAKnB,GAAwBoB,OAAAC,QAAAH"}