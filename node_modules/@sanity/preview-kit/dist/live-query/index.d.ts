/// <reference types="react" />

import type { PropsWithChildren } from 'react'
import type { QueryParams } from '@sanity/client'

/** @public */
declare function LiveQuery<
  QueryResult,
  QueryParams extends QueryParams = QueryParams,
>(props: LiveQueryProps<QueryResult, QueryParams>): React.ReactNode

declare namespace LiveQuery {
  var displayName: string
}
export { LiveQuery }
export default LiveQuery

/** @public */
export declare type LiveQueryClientComponentProps<QueryResult, QueryParams> =
  PropsWithChildren<{
    /**
     * If a parent <LiveQueryProvider> is missing, then an error is thrown.
     * If you want to disable this behavior, set this prop to false.
     * @defaultValue true
     */
    throwOnMissingProvider?: boolean
    initialData: QueryResult
    query: string
    params?: QueryParams | undefined
  }>

/** @public */
export declare interface LiveQueryProps<
  QueryResult,
  QueryParams extends QueryParams = QueryParams,
> extends LiveQueryClientComponentProps<QueryResult, QueryParams> {
  enabled: boolean
  as?: React.ComponentType<any>
}

export {}
