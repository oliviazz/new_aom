{"version":3,"file":"LiveQuery.js","sources":["../../src/live-query/LiveQuery.tsx"],"sourcesContent":["import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport { Children, isValidElement, lazy } from 'react'\n\nimport type { LiveQueryClientComponentProps } from './LiveQueryClientComponent'\n\nconst ClientComponent = lazy(() => import('./LiveQueryClientComponent'))\n\n/** @public */\nexport interface LiveQueryProps<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n> extends LiveQueryClientComponentProps<QueryResult, QueryParams> {\n  enabled: boolean\n  // eslint-disable-next-line no-warning-comments\n  // @TODO fix typing of this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  as?: React.ComponentType<any>\n}\n\nconst DEFAULT_PARAMS = {} as ClientQueryParams\n\n/** @public */\nexport function LiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(props: LiveQueryProps<QueryResult, QueryParams>): React.ReactNode {\n  // Always passthrough when not enabled\n  if (!props.enabled) {\n    return props.children\n  }\n\n  const {\n    query,\n    params = DEFAULT_PARAMS,\n    initialData,\n    as: LiveComponent,\n  } = props\n  // If we have an `as` prop it means we're likely working around a `children` that is RSC, and the `as` prop provides a Client Component\n  if (LiveComponent) {\n    if (Children.count(props.children) > 1) {\n      throw new Error(\n        'LiveQuery: `as` prop can only be used with a single child',\n      )\n    }\n    if (!isValidElement(props.children)) {\n      throw new Error('LiveQuery: `as` prop requires a valid `children` prop')\n    }\n\n    return (\n      <ClientComponent\n        // eslint-disable-next-line no-warning-comments\n        // @TODO improve the typing of this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        initialData={initialData as any}\n        query={query}\n        // eslint-disable-next-line no-warning-comments\n        // @TODO improve the typing of this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        params={params as any}\n        throwOnMissingProvider={props.throwOnMissingProvider}\n      >\n        <LiveComponent {...props.children.props} />\n      </ClientComponent>\n    )\n  }\n\n  // Setup a `useLiveQuery` wrapper and override the `data` prop on the children component\n  return (\n    <ClientComponent\n      // eslint-disable-next-line no-warning-comments\n      // @TODO improve the typing of this\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      initialData={initialData as any}\n      query={query}\n      // eslint-disable-next-line no-warning-comments\n      // @TODO improve the typing of this\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      params={params as any}\n    >\n      {props.children}\n    </ClientComponent>\n  )\n}\nLiveQuery.displayName = 'LiveQuery'\n"],"names":["jsx","lazy","Children","isValidElement","ClientComponent","import","DEFAULT_PARAMS","LiveQuery","props","enabled","children","query","params","initialData","as","LiveComponent","count","Error","throwOnMissingProvider","displayName"],"mappings":"cAKAA,MAAA,mCAAAC,cAAAC,oBAAAC,MAAA,QAAA,MAAMC,EAAkBH,GAAK,IAAMI,OAAO,mCAcpCC,EAAiB,GAGhB,SAASC,EAGdC,GAEA,IAAKA,EAAMC,QACT,OAAOD,EAAME,SAGT,MAAAC,MACJA,EAAAC,OACAA,EAASN,EAAAO,YACTA,EACAC,GAAIC,GACFP,EAEJ,GAAIO,EAAe,CACjB,GAAIb,EAASc,MAAMR,EAAME,UAAY,EACnC,MAAM,IAAIO,MACR,6DAGA,IAACd,EAAeK,EAAME,UAClB,MAAA,IAAIO,MAAM,yDAIhB,OAAAjB,EAACI,EAAA,CAICS,cACAF,QAIAC,SACAM,uBAAwBV,EAAMU,uBAE9BR,WAACK,EAAA,IAAkBP,EAAME,SAASF,SAGxC,CAIE,OAAAR,EAACI,EAAA,CAICS,cACAF,QAIAC,SAECF,SAAMF,EAAAE,UAGb,CACAH,EAAUY,YAAc"}